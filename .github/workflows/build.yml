---
name: Build and Push Docker Images

on:
  push:
    branches:
      - master
    paths:
      - 'images/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'images/**'
  schedule:
    # Weekly builds on Sunday at 2 AM UTC for security updates
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  # Change this to your GitHub username
  GITHUB_USERNAME: ${{ github.repository_owner }}

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu variants with specific Python versions
          - os: ubuntu
            version: "20.04"
            image_name: ubuntu-2004
            platforms: linux/amd64,linux/arm64
            python_version: "3.9"
          - os: ubuntu
            version: "22.04"
            image_name: ubuntu-2204
            platforms: linux/amd64,linux/arm64
            python_version: "3.10"
          - os: ubuntu
            version: "24.04"
            image_name: ubuntu-2404
            platforms: linux/amd64,linux/arm64
            python_version: "3.11"
          # Debian variants with specific Python versions
          - os: debian
            version: "10"
            image_name: debian-10
            platforms: linux/amd64,linux/arm64
            python_version: "3.9"
          - os: debian
            version: "11"
            image_name: debian-11
            platforms: linux/amd64,linux/arm64
            python_version: "3.10"
          - os: debian
            version: "12"
            image_name: debian-12
            platforms: linux/amd64,linux/arm64
            python_version: "3.11"
          # AlmaLinux variants
          - os: almalinux
            version: "8"
            image_name: almalinux-8
            platforms: linux/amd64,linux/arm64
            python_version: "3.9"
          - os: almalinux
            version: "9"
            image_name: almalinux-9
            platforms: linux/amd64,linux/arm64
            python_version: "3.9"
          # Rocky Linux variants
          - os: rockylinux
            version: "8"
            image_name: rockylinux-8
            platforms: linux/amd64,linux/arm64
            python_version: "3.9"
          - os: rockylinux
            version: "9"
            image_name: rockylinux-9
            platforms: linux/amd64,linux/arm64
            python_version: "3.9"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule,pattern={{date 'YYYY-MM-DD'}}
            type=raw,value=${{ matrix.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./images/${{ matrix.image_name }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          # Test basic functionality
          docker run --rm --platform linux/amd64 \
            ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}:${{ matrix.version }} \
            python3 --version
          
          docker run --rm --platform linux/amd64 \
            ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}:${{ matrix.version }} \
            ansible --version

  security-scan:
    name: Security Scan ${{ matrix.os }} ${{ matrix.version }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            version: "22.04"
            image_name: ubuntu-2204
          - os: debian
            version: "12"
            image_name: debian-12
          - os: almalinux
            version: "9"
            image_name: almalinux-9
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}:${{ matrix.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
