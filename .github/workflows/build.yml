---
name: Build and Push Docker Images

on:
  push:
    branches:
      - master
    paths:
      - 'images/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'images/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push images even from PR'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  # Change this to your GitHub username
  GITHUB_USERNAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  # Build stage for PRs - builds only, no push
  build-pr:
    name: Build PR - ${{ matrix.os }} ${{ matrix.version }}
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu variants with native Python versions (newest first)
          - os: ubuntu
            version: "24.04"
            image_name: ubuntu-2404
            platforms: linux/amd64
            python_version: "3.12"
          - os: ubuntu
            version: "22.04"
            image_name: ubuntu-2204
            platforms: linux/amd64
            python_version: "3.10"
          - os: ubuntu
            version: "20.04"
            image_name: ubuntu-2004
            platforms: linux/amd64
            python_version: "3.8"
          # Debian variants with native Python versions (newest first)
          - os: debian
            version: "12"
            image_name: debian-12
            platforms: linux/amd64
            python_version: "3.11"
          - os: debian
            version: "11"
            image_name: debian-11
            platforms: linux/amd64
            python_version: "3.9"
          - os: debian
            version: "10"
            image_name: debian-10
            platforms: linux/amd64
            python_version: "3.7"
          # AlmaLinux variants with native Python versions (newest first)
          - os: almalinux
            version: "9"
            image_name: almalinux-9
            platforms: linux/amd64
            python_version: "3.9"
          - os: almalinux
            version: "8"
            image_name: almalinux-8
            platforms: linux/amd64
            python_version: "3.6"
          # Rocky Linux variants with native Python versions (newest first)
          - os: rockylinux
            version: "9"
            image_name: rockylinux-9
            platforms: linux/amd64
            python_version: "3.9"
          - os: rockylinux
            version: "8"
            image_name: rockylinux-8
            platforms: linux/amd64
            python_version: "3.6"
          # Oracle Linux variants with native Python versions (newest first)
          - os: oraclelinux
            version: "9"
            image_name: oraclelinux-9
            platforms: linux/amd64
            python_version: "3.9"
          - os: oraclelinux
            version: "8"
            image_name: oraclelinux-8
            platforms: linux/amd64
            python_version: "3.6"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy appropriate requirements file to image directory
        run: |
          # Copy the Python version-specific requirements file
          if [ -f "requirements-${{ matrix.python_version }}.txt" ]; then
            echo "Using requirements-${{ matrix.python_version }}.txt for Python ${{ matrix.python_version }}"
            cat requirements-${{ matrix.python_version }}.txt requirements-common.txt > ./images/${{ matrix.image_name }}/requirements.txt
          else
            echo "Python ${{ matrix.python_version }} specific requirements file not found, using default requirements.txt"
            cp requirements.txt ./images/${{ matrix.image_name }}/
          fi
          
          # List what was copied for verification
          ls -la ./images/${{ matrix.image_name }}/requirements*.txt

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}
          tags: |
            type=ref,event=pr
            type=raw,value=${{ matrix.version }}-pr-{{sha}}

      - name: Build Docker image (PR - No Push)
        uses: docker/build-push-action@v5
        with:
          context: ./images/${{ matrix.image_name }}
          platforms: ${{ matrix.platforms }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build and push stage for master branch merges
  build-and-push:
    name: Build & Push - ${{ matrix.os }} ${{ matrix.version }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.force_push)
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu variants with native Python versions (newest first)
          - os: ubuntu
            version: "24.04"
            image_name: ubuntu-2404
            platforms: linux/amd64
            python_version: "3.12"
          - os: ubuntu
            version: "22.04"
            image_name: ubuntu-2204
            platforms: linux/amd64
            python_version: "3.10"
          - os: ubuntu
            version: "20.04"
            image_name: ubuntu-2004
            platforms: linux/amd64
            python_version: "3.8"
          # Debian variants with native Python versions (newest first)
          - os: debian
            version: "12"
            image_name: debian-12
            platforms: linux/amd64
            python_version: "3.11"
          - os: debian
            version: "11"
            image_name: debian-11
            platforms: linux/amd64
            python_version: "3.9"
          - os: debian
            version: "10"
            image_name: debian-10
            platforms: linux/amd64
            python_version: "3.7"
          # AlmaLinux variants with native Python versions (newest first)
          - os: almalinux
            version: "9"
            image_name: almalinux-9
            platforms: linux/amd64
            python_version: "3.9"
          - os: almalinux
            version: "8"
            image_name: almalinux-8
            platforms: linux/amd64
            python_version: "3.6"
          # Rocky Linux variants with native Python versions (newest first)
          - os: rockylinux
            version: "9"
            image_name: rockylinux-9
            platforms: linux/amd64
            python_version: "3.9"
          - os: rockylinux
            version: "8"
            image_name: rockylinux-8
            platforms: linux/amd64
            python_version: "3.6"
          # Oracle Linux variants with native Python versions (newest first)
          - os: oraclelinux
            version: "9"
            image_name: oraclelinux-9
            platforms: linux/amd64
            python_version: "3.9"
          - os: oraclelinux
            version: "8"
            image_name: oraclelinux-8
            platforms: linux/amd64
            python_version: "3.6"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy appropriate requirements file to image directory
        run: |
          # Copy the Python version-specific requirements file
          if [ -f "requirements-${{ matrix.python_version }}.txt" ]; then
            echo "Using requirements-${{ matrix.python_version }}.txt for Python ${{ matrix.python_version }}"
            cat requirements-${{ matrix.python_version }}.txt requirements-common.txt > ./images/${{ matrix.image_name }}/requirements.txt
          else
            echo "Python ${{ matrix.python_version }} specific requirements file not found, using default requirements.txt"
            cp requirements.txt ./images/${{ matrix.image_name }}/
          fi
          
          # List what was copied for verification
          ls -la ./images/${{ matrix.image_name }}/requirements*.txt

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ matrix.version }}-{{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=${{ matrix.version }}-latest
            type=raw,value=${{ matrix.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./images/${{ matrix.image_name }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wait for image to be available
        run: |
          echo "Waiting for image to be available in registry..."
          sleep 30
          echo "Verifying image exists: ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}:${{ matrix.version }}"
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}:${{ matrix.version }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  # Don't fail the job if scanning fails
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/molecule-${{ matrix.os }}:${{ matrix.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the job on vulnerabilities

      - name: Check if SARIF file exists
        id: sarif-check
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
            echo "✅ SARIF file created successfully for ${{ matrix.os }} ${{ matrix.version }}"
            ls -la trivy-results.sarif
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "❌ SARIF file not found for ${{ matrix.os }} ${{ matrix.version }}"
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: steps.sarif-check.outputs.sarif-exists == 'true'
        continue-on-error: true  # Don't fail if Code Scanning is not enabled
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload SARIF as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: steps.sarif-check.outputs.sarif-exists == 'true'
        with:
          name: trivy-sarif-${{ matrix.os }}-${{ matrix.version }}
          path: trivy-results.sarif
          retention-days: 30


